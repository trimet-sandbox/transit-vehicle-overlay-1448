{"version":3,"sources":["../../src/utils/state.js"],"names":["useState","useRef","useEffect","useCallback","checkRefreshInteval","data","useZoomState","initialZoom","mapZoom","setMapZoom","onViewportChanged","zoom","useViewState","mapCenter","setMapCenter","center","useTrackedVehicleState","fetchPatternCallback","initVehicle","initPattern","trackedVehicle","setTrackedVehicle","routePattern","setRoutePattern","trackedVehicleRef","routePatternRef","current","getRoutePattern","vehicle","patternId","id","cached","tripId","updateTrackedVehicle","stopTracking","updatePattern","getTrackedVehicle","useVehicleListUpdater","fetchVehiclesCallback","refreshDelay","vehicleList","setVehicleList","fetchData","vehicles","trackedRef","linterIgnoreTheseProps","queryId","getVehicleId","t","findVehicleById","onInterval","newVehicles","intervalId","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { checkRefreshInteval } from \"./fetch\";\r\nimport * as data from \"./data\";\r\n\r\n/**\r\n * Use the state variable returned by this hook when you want the vehicle component to\r\n * re-paint after otp-ui map zoom events.\r\n *\r\n * e.g., send the mapZoom down to the vehicles component as a prop, and the component will\r\n * then redraw every time the map's zoom level changes.\r\n *\r\n * @return zoom level (state variable) and the onViewportChanged cb for base-map\r\n */\r\nexport function useZoomState(initialZoom = 14) {\r\n  const [mapZoom, setMapZoom] = useState(initialZoom);\r\n\r\n  const onViewportChanged = ({ zoom }) => {\r\n    // console.info(`zoom level ${zoom}`);\r\n    setMapZoom(zoom);\r\n  };\r\n\r\n  return [mapZoom, onViewportChanged];\r\n}\r\n\r\n/**\r\n * Use the state variables returned by this hook when you want the vehicle component to\r\n * re-paint after otp-ui map and pan zoom events.\r\n *\r\n * e.g., you can send mapZoom and mapCenter down to the vehicles component as props, which\r\n * will then make React redraw the vehicles component\r\n *\r\n * @return zoom level, center [x,y] (state variables) and the onViewportChanged cb for base-map\r\n */\r\nexport function useViewState(initialZoom = 14) {\r\n  const [mapZoom, setMapZoom] = useState(initialZoom);\r\n  const [mapCenter, setMapCenter] = useState([0.0, 0.0]);\r\n\r\n  const onViewportChanged = ({ zoom, center }) => {\r\n    // console.info(`zoom level ${zoom}`);\r\n    setMapZoom(zoom);\r\n    setMapCenter(center);\r\n  };\r\n\r\n  return [mapZoom, mapCenter, onViewportChanged];\r\n}\r\n\r\n/**\r\n * useTrackedVehicleState\r\n *\r\n * use this hook when you want your layer to track a vehicle\r\n * (and potentially show the route geometry of this vehicle)\r\n *\r\n * NOTE: about the useState, useRef, useEffect, etc... mumbo jumbo\r\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/#refs-to-the-rescue\r\n *\r\n * @param fetchPatternCallback -  used to fetch a vehicles' pattern geom\r\n * @param initVehicle\r\n * @param initPattern\r\n * @return [getRoutePattern(), getTrackedVehicle(), updateTrackedVehicle()]\r\n */\r\nexport function useTrackedVehicleState(\r\n  fetchPatternCallback = null,\r\n  initVehicle = null,\r\n  initPattern = null\r\n) {\r\n  const [trackedVehicle, setTrackedVehicle] = useState(initVehicle);\r\n  const [routePattern, setRoutePattern] = useState(initPattern);\r\n  const trackedVehicleRef = useRef(trackedVehicle);\r\n  const routePatternRef = useRef(routePattern);\r\n\r\n  // a ref + useEffect give a handle on the current trackedVehicle state in util functions, etc...\r\n  useEffect(() => {\r\n    trackedVehicleRef.current = trackedVehicle;\r\n  }, [trackedVehicle]);\r\n\r\n  useEffect(() => {\r\n    routePatternRef.current = routePattern;\r\n  }, [routePattern]);\r\n\r\n  const getRoutePattern = vehicle => {\r\n    if (fetchPatternCallback && vehicle) {\r\n      const patternId = routePatternRef.current\r\n        ? routePatternRef.current.id\r\n        : null;\r\n      const cached = vehicle.tripId === patternId;\r\n      if (!cached) fetchPatternCallback(vehicle, setRoutePattern);\r\n    }\r\n\r\n    return routePatternRef.current;\r\n  };\r\n\r\n  /**\r\n   * accept a vehicle record and two booleans to control how state is updated\r\n   *\r\n   * @param vehicle - tracked vehicle record\r\n   * @param stopTracking - boolean (e.g., 'stop tracking' - if this vehicle is tracking, then stop)\r\n   * @param updatePattern - boolean (default true)\r\n   */\r\n  const updateTrackedVehicle = (\r\n    vehicle,\r\n    stopTracking,\r\n    updatePattern = true\r\n  ) => {\r\n    if (stopTracking) {\r\n      setTrackedVehicle(null);\r\n      setRoutePattern(null);\r\n    } else if (vehicle) {\r\n      setTrackedVehicle(vehicle);\r\n      if (updatePattern) getRoutePattern(vehicle);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * return both the tracked vehicle state variable (using will cause a redraw)\r\n   * and the ref to that vehicle.\r\n   *\r\n   * Note: the ref is a handle to the most recent state of the tracked vehicle, which can be used\r\n   * by routines outside of the react tree (don't ask me ... it's strange, hacky stuff).\r\n   */\r\n  const getTrackedVehicle = () => {\r\n    return [trackedVehicle, trackedVehicleRef.current];\r\n  };\r\n\r\n  return [getRoutePattern, getTrackedVehicle, updateTrackedVehicle];\r\n}\r\n\r\n/**\r\n * useVehicleListUpdater - get vehicles from a service based on a refresh interval\r\n *\r\n * @param fetchVehiclesCallback\r\n * @param getTrackedVehicle\r\n * @param updateTrackedVehicle\r\n * @param refreshDelay\r\n * @return vehicleList[] (state variable)\r\n */\r\nexport function useVehicleListUpdater(\r\n  fetchVehiclesCallback,\r\n  getTrackedVehicle,\r\n  updateTrackedVehicle,\r\n  refreshDelay = null\r\n) {\r\n  const [vehicleList, setVehicleList] = useState([]);\r\n  refreshDelay = checkRefreshInteval(refreshDelay);\r\n\r\n  const fetchData = useCallback(async () => {\r\n    const vehicles = await fetchVehiclesCallback();\r\n    if (vehicles) {\r\n      // todo: could maybe DQ vehicles data here before updating our vehicles list\r\n      setVehicleList(vehicles);\r\n      const [trackedVehicle, trackedRef] = getTrackedVehicle();\r\n      data.linterIgnoreTheseProps(trackedVehicle);\r\n\r\n      // update the tracked vehicle with latest position\r\n      const queryId = data.getVehicleId(trackedRef);\r\n      if (queryId && updateTrackedVehicle) {\r\n        const t = data.findVehicleById(vehicles, queryId);\r\n        if (t) updateTrackedVehicle(t, false, true);\r\n      }\r\n    }\r\n  }, [fetchVehiclesCallback]);\r\n\r\n  useEffect(() => {\r\n    const onInterval = async () => {\r\n      // todo: why assignment to newVehicles -- not used?\r\n      const newVehicles = await fetchData();\r\n      data.linterIgnoreTheseProps(newVehicles);\r\n    };\r\n    onInterval();\r\n    const intervalId = setInterval(onInterval, refreshDelay);\r\n    return () => clearInterval(intervalId);\r\n  }, [fetchData, refreshDelay]);\r\n\r\n  return vehicleList;\r\n}\r\n"],"file":"state.js"}