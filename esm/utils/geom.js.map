{"version":3,"sources":["../../src/utils/geom.js"],"names":["React","Polyline","turf","nearestPointOnLine","makeSplitLine","splitGeom","highlight","lowlight","segments","length","push","key","geometry","findPointOnLine","splitPoint","geom","retVal","pt","point","line","lineString","snapped","units","properties","index","splitLineGeometry","splitPt","geomPast","geomFuture","i","reverseGeojsonPoints","revPoints","coordinates","c","makePattern","geojson","id","data","pattern"],"mappings":"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","sourcesContent":["/**\r\n * utilities to manipulate (line) geometries, ala splitting the pattern geometry into 2\r\n * sections, of has already travelled, and to be travelled, etc...\r\n */\r\nimport React from \"react\";\r\nimport { Polyline } from \"react-leaflet\";\r\nimport * as turf from \"@turf/helpers\";\r\nimport nearestPointOnLine from \"@turf/nearest-point-on-line\";\r\n\r\n/**\r\n * creates the line segments array for the overlay\r\n *\r\n * @param splitGeom\r\n * @param highlight\r\n * @param lowlight\r\n * @returns {Array}\r\n */\r\nexport function makeSplitLine(splitGeom, highlight, lowlight) {\r\n  const segments = [];\r\n  if (splitGeom && splitGeom.length === 2) {\r\n    segments.push(\r\n      <Polyline\r\n        key={splitGeom[0].key}\r\n        positions={splitGeom[0].geometry}\r\n        {...lowlight} // eslint-disable-line react/jsx-props-no-spreading\r\n      />\r\n    );\r\n    segments.push(\r\n      <Polyline\r\n        key={splitGeom[1].key}\r\n        positions={splitGeom[1].geometry}\r\n        {...highlight} // eslint-disable-line react/jsx-props-no-spreading\r\n      />\r\n    );\r\n  }\r\n  return segments;\r\n}\r\n\r\n/**\r\n * returns the point (geom array index) on the line that is closest to the vehicle\r\n *\r\n * @param vehicle\r\n * @param geom\r\n * @returns {number}\r\n */\r\nexport function findPointOnLine(splitPoint, geom) {\r\n  let retVal = 0;\r\n  if (splitPoint && geom && geom.length > 1) {\r\n    const pt = turf.point(splitPoint);\r\n    const line = turf.lineString(geom);\r\n    const snapped = nearestPointOnLine(line, pt, { units: \"miles\" });\r\n    if (\r\n      snapped &&\r\n      snapped.properties.index &&\r\n      snapped.properties.index < geom.length\r\n    ) {\r\n      retVal = snapped.properties.index;\r\n    }\r\n  }\r\n  return retVal;\r\n}\r\n\r\n/**\r\n * break a line geometry in 2 at the vehicle location\r\n * @param geom\r\n * @param splitPt\r\n * @param key\r\n * @returns {*}\r\n */\r\nexport function splitLineGeometry(geom, splitPt, key) {\r\n  let retVal = null;\r\n  if (geom) {\r\n    const geomPast = [];\r\n    const geomFuture = [];\r\n\r\n    for (let i = 0; i < geom.length; i++) {\r\n      if (i <= splitPt) geomPast.push(geom[i]);\r\n      if (i >= splitPt) geomFuture.push(geom[i]);\r\n    }\r\n    retVal = [\r\n      { key: `${key}-PAST`, geometry: geomPast },\r\n      { key: `${key}-FUTURE`, geometry: geomFuture }\r\n    ];\r\n  }\r\n  return retVal;\r\n}\r\n\r\n/**\r\n * geojson uses [lon,lat] (e.g., [X, Y]) in representing coordinates\r\n * this utility function reverses the point order to be [lat, lon] (or [Y, X])\r\n *\r\n * @return array of reversed points in the line geom\r\n */\r\nexport function reverseGeojsonPoints(geom) {\r\n  const revPoints = [];\r\n  for (let i = 0; i < geom.coordinates.length; i++) {\r\n    if (geom.coordinates[i] && geom.coordinates[i].length === 2) {\r\n      const c = [geom.coordinates[i][1], geom.coordinates[i][0]];\r\n      revPoints.push(c);\r\n    }\r\n  }\r\n  return revPoints;\r\n}\r\n\r\n/** turns geojson line into a pattern (line + id object) for route renderer */\r\nexport function makePattern(geojson, id) {\r\n  const data = reverseGeojsonPoints(geojson);\r\n  const pattern = { id, data };\r\n  return pattern;\r\n}\r\n"],"file":"geom.js"}