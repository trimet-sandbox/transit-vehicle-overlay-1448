{"version":3,"sources":["../../src/utils/data.js"],"names":["linterIgnoreTheseProps","str","val","retVal","e","console","error","getVehicleId","vehicleObjectOrString","queryId","String","blockId","tripId","findVehicleById","vehicleList","defVal","some","v","triMetRouteToShortName","route","convertTriMetRecord","rec","qt","secs","Math","round","time","date","Date","toLocaleString","agencyId","id","vehicleID","blockID","vehicleId","routeId","routeNumber","shapeId","tripID","directionId","direction","stopId","nextLocID","stopSequence","nextStopSeq","lat","latitude","lon","longitude","heading","bearing","routeType","type","routeShortName","routeLongName","signMessage","reportDate","seconds","status","convertAltData","feed","resultSet","vehicle","queryTime","map"],"mappings":"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","sourcesContent":["/** utility functions for converting and manipulating vehicle data */\r\n\r\n/** this function is used to have props that are not used w/out lint errors */\r\nexport function linterIgnoreTheseProps() {}\r\n\r\n/** simple (python-esque) conversion of an int to a string */\r\nexport function str(val) {\r\n  let retVal = \"\";\r\n  try {\r\n    retVal = `${val}`;\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n  return retVal;\r\n}\r\n\r\n/** gets best appropriate vehicle tracker id from input parameter based on type and data */\r\nexport function getVehicleId(vehicleObjectOrString) {\r\n  let queryId = null;\r\n  if (vehicleObjectOrString) {\r\n    if (\r\n      typeof vehicleObjectOrString === \"string\" ||\r\n      vehicleObjectOrString instanceof String\r\n    )\r\n      queryId = vehicleObjectOrString;\r\n    else if (vehicleObjectOrString.blockId)\r\n      queryId = vehicleObjectOrString.blockId;\r\n    else if (vehicleObjectOrString.tripId)\r\n      queryId = vehicleObjectOrString.tripId;\r\n  }\r\n  return queryId;\r\n}\r\n\r\n/** find a vehicle by block or trip id from a list of vehicles */\r\nexport function findVehicleById(vehicleList, queryId, defVal = null) {\r\n  let retVal = defVal;\r\n  try {\r\n    if (vehicleList && queryId) {\r\n      vehicleList.some(v => {\r\n        if (queryId === v.blockId || queryId === v.tripId) {\r\n          retVal = v;\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n  return retVal;\r\n}\r\n\r\n/**\r\n * make a short name (good for tooltips)\r\n * this routine used for converting a developer.trimet.org response (see below)\r\n */\r\nexport function triMetRouteToShortName(route) {\r\n  let retVal = \"\";\r\n  switch (route) {\r\n    case 90:\r\n      retVal = \"MAX Red\";\r\n      break;\r\n    case 100:\r\n      retVal = \"MAX Blue\";\r\n      break;\r\n    case 190:\r\n      retVal = \"MAX Yellow\";\r\n      break;\r\n    case 200:\r\n      retVal = \"MAX Green\";\r\n      break;\r\n    case 290:\r\n      retVal = \"MAX Orange\";\r\n      break;\r\n    case 203:\r\n      retVal = \"WES\";\r\n      break;\r\n    case 193:\r\n      retVal = \"PSC NS Line\";\r\n      break;\r\n    case 194:\r\n      retVal = \"PSC A-Loop\";\r\n      break;\r\n    case 195:\r\n      retVal = \"PSC B-Loop\";\r\n      break;\r\n    default:\r\n      retVal = str(route);\r\n      break;\r\n  }\r\n  return retVal;\r\n}\r\n\r\n/**\r\n * convert a developer.trimet.org vehicle object to the\r\n * @opentripplanner/core-utils/types/transitVehicleType object format\r\n */\r\nexport function convertTriMetRecord(rec, qt) {\r\n  const secs = Math.round((qt - rec.time) / 1000);\r\n  const date = new Date(rec.time).toLocaleString();\r\n\r\n  const retVal = {\r\n    agencyId: \"TRIMET\",\r\n    id: `${rec.vehicleID}+${rec.blockID}`,\r\n    vehicleId: str(rec.vehicleID),\r\n    routeId: str(rec.routeNumber),\r\n    blockId: str(rec.blockID),\r\n    shapeId: null,\r\n    tripId: str(rec.tripID),\r\n    directionId: str(rec.direction),\r\n    stopId: str(rec.nextLocID),\r\n    stopSequence: rec.nextStopSeq,\r\n    lat: rec.latitude,\r\n    lon: rec.longitude,\r\n    heading: rec.bearing,\r\n    routeType: rec.type === \"rail\" ? \"TRAM\" : \"BUS\",\r\n    routeShortName: triMetRouteToShortName(rec.routeNumber),\r\n    routeLongName: rec.signMessage,\r\n    reportDate: date,\r\n    seconds: secs,\r\n    status: \"IN_TRANSIT_TO\"\r\n  };\r\n  return retVal;\r\n}\r\n\r\n/**\r\n * convert list of developer.trimet.org vehicle objects to format used in this component\r\n * curl \"https://developer.trimet.org/ws/v2/vehicles/appid/B393B2CE96A258A72BAB481CA\"\r\n */\r\nexport function convertAltData(feed) {\r\n  let retVal = [];\r\n  if (feed && feed.resultSet && feed.resultSet.vehicle) {\r\n    const qt = feed.resultSet.queryTime;\r\n    retVal = feed.resultSet.vehicle.map(rec => convertTriMetRecord(rec, qt));\r\n  }\r\n  return retVal;\r\n}\r\n"],"file":"data.js"}