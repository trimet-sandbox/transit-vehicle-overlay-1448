{"version":3,"sources":["../../../src/components/RouteGeometry/index.js"],"names":["coreUtils","React","PropTypes","FeatureGroup","utils","types","leafletPathType","transitVehicleType","RouteGeometry","props","pattern","zoom","selectedVehicle","highlightColor","lowlightColor","highlight","lowlight","linterIgnoreTheseProps","setColor","splitCoord","getVehicleCoordinates","pt","findPointOnLine","data","geom","splitLineGeometry","id","segments","makeSplitLine","retVal","length","propTypes","number","shape","string","isRequired","arrayOf","defaultProps","color","weight","opacity","dashArray"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FeatureGroup } from \"react-leaflet\";\r\n\r\nimport * as utils from \"../../utils\";\r\n\r\nconst { leafletPathType, transitVehicleType } = coreUtils.types;\r\n\r\n/**\r\n * vehicle geometry presentational component that creates a map overlay for the line\r\n * geometry showing the travel pattern of a vehicle\r\n */\r\nexport default function RouteGeometry(props) {\r\n  const { pattern, zoom, selectedVehicle } = props;\r\n  const { highlightColor, lowlightColor } = props;\r\n  let { highlight, lowlight } = props;\r\n\r\n  utils.linterIgnoreTheseProps(zoom);\r\n\r\n  if (highlightColor) highlight = utils.setColor(highlightColor, highlight);\r\n  if (lowlightColor) lowlight = utils.setColor(lowlightColor, lowlight);\r\n\r\n  const splitCoord =\r\n    selectedVehicle && utils.getVehicleCoordinates(selectedVehicle);\r\n  const pt = utils.findPointOnLine(splitCoord, pattern.data);\r\n  const geom = utils.splitLineGeometry(pattern.data, pt, pattern.id);\r\n  const segments = utils.makeSplitLine(geom, highlight, lowlight);\r\n\r\n  let retVal = <FeatureGroup />;\r\n  if (segments && segments.length === 2) {\r\n    retVal = <FeatureGroup>{segments}</FeatureGroup>;\r\n  }\r\n  return retVal;\r\n}\r\n\r\nRouteGeometry.propTypes = {\r\n  /** map zoom: is part of the props due to redrawing this layer on map zoom */\r\n  zoom: PropTypes.number,\r\n\r\n  /** optional vehicle record for the (tracked) vehicle */\r\n  selectedVehicle: transitVehicleType,\r\n\r\n  /** line geometry, ala { id: <tripId>, data: [[lat, lon], [45.50,-122.41], etc..] } */\r\n  pattern: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    data: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired\r\n  }),\r\n\r\n  /** color of the *to be travelled* portion of tracked route geom */\r\n  highlightColor: PropTypes.string,\r\n\r\n  /** color of the *already travelled* tracked vehicle route (see highlightColor) */\r\n  lowlightColor: PropTypes.string,\r\n\r\n  /** line styling options for the to be traveled part of the line geom */\r\n  highlight: leafletPathType,\r\n\r\n  /** line styling options for the already traveled portion of the line geom */\r\n  lowlight: leafletPathType\r\n};\r\n\r\nRouteGeometry.defaultProps = {\r\n  zoom: 13,\r\n  pattern: null,\r\n  selectedVehicle: null,\r\n  highlightColor: null,\r\n  lowlightColor: null,\r\n  highlight: {\r\n    color: \"#00bfff\",\r\n    weight: 5.0,\r\n    opacity: 0.85\r\n  },\r\n  lowlight: {\r\n    color: \"#777\",\r\n    weight: 5.0,\r\n    opacity: 0.7,\r\n    dashArray: \"1, 10, 1, 10\"\r\n  }\r\n};\r\n"],"file":"index.js"}