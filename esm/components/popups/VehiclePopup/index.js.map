{"version":3,"sources":["../../../../src/components/popups/VehiclePopup/index.js"],"names":["coreUtils","React","PropTypes","FormattedDate","FormattedMessage","Popup","PopupStyle","VehicleTracker","defaultMessages","linterIgnoreTheseProps","FormattedDurationWithSeconds","VehiclePopup","isTracked","setTracked","vehicle","blockId","reportDate","routeLongName","seconds","status","stopId","stopSequence","tripId","vehicleId","displayedStatus","isMultipleVehicles","indexOf","vehicleMessageValues","count","vehicleIds","replace","durationText","duration","date","propTypes","bool","func","types","transitVehicleType","defaultProps"],"mappings":"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","sourcesContent":["import coreUtils from \"@opentripplanner/core-utils\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FormattedDate, FormattedMessage } from \"react-intl\";\r\nimport { Popup } from \"react-leaflet\";\r\n\r\nimport { PopupStyle } from \"../styled\";\r\nimport VehicleTracker from \"../vehicle-tracker\";\r\nimport { defaultMessages, linterIgnoreTheseProps } from \"../../../utils\";\r\nimport FormattedDurationWithSeconds from \"../../../utils/formatted-duration-with-seconds\";\r\n\r\n/**\r\n * view component for vehicle marker popup\r\n * content is derived from the vehicle record\r\n */\r\nexport default function VehiclePopup({ isTracked, setTracked, vehicle }) {\r\n  const {\r\n    blockId,\r\n    reportDate,\r\n    routeLongName,\r\n    seconds,\r\n    status,\r\n    stopId,\r\n    stopSequence,\r\n    tripId,\r\n    vehicleId\r\n  } = vehicle;\r\n  let displayedStatus;\r\n  if (status === \"IN_TRANSIT_TO\") {\r\n    displayedStatus = (\r\n      <FormattedMessage\r\n        defaultMessage={\r\n          defaultMessages[\"otpUi.TransitVehicleOverlay.statusEnRoute\"]\r\n        }\r\n        description=\"Text shown for a moving transit vehicle\"\r\n        id=\"otpUi.TransitVehicleOverlay.statusEnRoute\"\r\n        values={{ stopId }}\r\n      />\r\n    );\r\n  } else if (status === \"STOPPED_AT\") {\r\n    if (stopSequence === 1) {\r\n      displayedStatus = (\r\n        <FormattedMessage\r\n          defaultMessage={\r\n            defaultMessages[\"otpUi.TransitVehicleOverlay.statusAtStart\"]\r\n          }\r\n          description=\"Text shown for a transit vehicle at the beginning of the line\"\r\n          id=\"otpUi.TransitVehicleOverlay.statusAtStart\"\r\n          values={{ stopId }}\r\n        />\r\n      );\r\n    } else {\r\n      displayedStatus = (\r\n        <FormattedMessage\r\n          defaultMessage={\r\n            defaultMessages[\"otpUi.TransitVehicleOverlay.statusAtStop\"]\r\n          }\r\n          description=\"Text shown for a transit vehicle stopped at a stop\"\r\n          id=\"otpUi.TransitVehicleOverlay.statusAtStop\"\r\n          values={{ stopId }}\r\n        />\r\n      );\r\n    }\r\n  } else {\r\n    displayedStatus = (\r\n      <FormattedMessage\r\n        defaultMessage={\r\n          defaultMessages[\"otpUi.TransitVehicleOverlay.statusUnknown\"]\r\n        }\r\n        description=\"Text shown for an unknown status\"\r\n        id=\"otpUi.TransitVehicleOverlay.statusUnknown\"\r\n      />\r\n    );\r\n  }\r\n\r\n  const isMultipleVehicles = vehicleId.indexOf(\"+\") > 0;\r\n  const vehicleMessageValues = isMultipleVehicles\r\n    ? {\r\n        count: 2,\r\n        // TODO: ideally you would want to use the equivalent of the comma of the desired language.\r\n        vehicleIds: vehicleId.replace(/\\+/g, \", \")\r\n      }\r\n    : {\r\n        count: 1,\r\n        vehicleIds: vehicleId\r\n      };\r\n\r\n  return (\r\n    <Popup>\r\n      <PopupStyle>\r\n        <PopupStyle.Title>{routeLongName}</PopupStyle.Title>\r\n        <PopupStyle.Span>\r\n          <FormattedMessage\r\n            defaultMessage={\r\n              defaultMessages[\"otpUi.TransitVehicleOverlay.lastSeen\"]\r\n            }\r\n            description=\"Text describing how long ago a transit vehicle last reported its status\"\r\n            id=\"otpUi.TransitVehicleOverlay.lastSeen\"\r\n            values={{\r\n              durationText: (\r\n                <FormattedMessage\r\n                  defaultMessage={\r\n                    defaultMessages[\"otpUi.TransitVehicleOverlay.durationAgo\"]\r\n                  }\r\n                  description=\"Text describing a past duration\"\r\n                  id=\"otpUi.TransitVehicleOverlay.durationAgo\"\r\n                  values={{\r\n                    duration: <FormattedDurationWithSeconds seconds={seconds} />\r\n                  }}\r\n                />\r\n              )\r\n            }}\r\n          />\r\n        </PopupStyle.Span>\r\n        <PopupStyle.Span>\r\n          <FormattedMessage\r\n            defaultMessage={defaultMessages[\"otpUi.TransitVehicleOverlay.date\"]}\r\n            description=\"Text describing when a transit vehicle last reported its status\"\r\n            id=\"otpUi.TransitVehicleOverlay.date\"\r\n            values={{\r\n              date: <FormattedDate value={reportDate} />\r\n            }}\r\n          />\r\n        </PopupStyle.Span>\r\n        <PopupStyle.Span>\r\n          <FormattedMessage\r\n            defaultMessage={\r\n              defaultMessages[\"otpUi.TransitVehicleOverlay.status\"]\r\n            }\r\n            description=\"Text describing the status of a transit vehicle\"\r\n            id=\"otpUi.TransitVehicleOverlay.status\"\r\n            values={{ status: displayedStatus }}\r\n          />\r\n        </PopupStyle.Span>\r\n        <PopupStyle.Span>\r\n          <FormattedMessage\r\n            defaultMessage={\r\n              defaultMessages[\"otpUi.TransitVehicleOverlay.tripAndBlockIds\"]\r\n            }\r\n            description=\"Text showing a transit vehicle trip and block ids\"\r\n            id=\"otpUi.TransitVehicleOverlay.tripAndBlockIds\"\r\n            values={{ blockId, tripId }}\r\n          />\r\n        </PopupStyle.Span>\r\n        <PopupStyle.Span>\r\n          <FormattedMessage\r\n            defaultMessage={\r\n              defaultMessages[\"otpUi.TransitVehicleOverlay.vehicleIds\"]\r\n            }\r\n            description=\"Displays transit vehicle numbers\"\r\n            id=\"otpUi.TransitVehicleOverlay.vehicleIds\"\r\n            values={vehicleMessageValues}\r\n          />\r\n        </PopupStyle.Span>\r\n        <VehicleTracker\r\n          isTracked={isTracked}\r\n          setTracked={setTracked}\r\n          vehicle={vehicle}\r\n        />\r\n      </PopupStyle>\r\n    </Popup>\r\n  );\r\n}\r\n\r\nVehiclePopup.propTypes = {\r\n  /** indicate if this vehicle is being tracked, */\r\n  isTracked: PropTypes.bool,\r\n\r\n  /** callback which forwards the vehicle and tracking status from track button */\r\n  setTracked: PropTypes.func,\r\n\r\n  /** vehicle record - @see: core-utils/src/types/transitVehicleType */\r\n  vehicle: coreUtils.types.transitVehicleType\r\n};\r\n\r\nVehiclePopup.defaultProps = {\r\n  isTracked: false,\r\n  setTracked: (vehicle, isTracked) => {\r\n    linterIgnoreTheseProps(vehicle, isTracked);\r\n  },\r\n  vehicle: null\r\n};\r\n"],"file":"index.js"}